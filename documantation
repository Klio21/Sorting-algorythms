# -
Программа реализации различных алгоритмов сортировки с выводом отсортированного массива и вспомогательной информации в виде количества сравнений и обменов между элементами

Рассматриваются следующие алгоритмы сортировки: 

   №1 Сортировка методом пузырька
def bubble_sort(self, clist: list, reverse: bool)

Описание логики алгоритма №1
    Обходим массив от начала до конца, меняя местами неотсортированные соседние элементы. В результате первого прохода на последнее место «всплывёт» максимальный элемент. Теперь снова обходим неотсортированную часть массива (от первого элемента до предпоследнего) и меняем по пути неотсортированных соседей. Второй по величине элемент окажется на предпоследнем месте. Далее будем обходить всё уменьшающуюся неотсортированную часть массива, помещая найденные максимумы в конец.
    
Сложность алгоритма O(x^2), так как в худшем случае сравниваем элементы n - 1 + n - 2 + ... =n * (1 + n - 1)/2 = (n^2)/2 = O(x^2) раз, в лучшем случае массив будет отсортирован pf n = O(n) раз, в среднем случае O(x^2), так как любое самоме малое число в конце вынуждает сортировать максимальноеколичество раз
    




      №2 Коктейльная(шейкерная) сортировка
    def shaker_sort(self, clist: list, reverse: bool)
    
Описание логики алгоритма №2
    Начинается процесс как в «пузырьке»: помещаем максимум на последнее место. После этого идём в обратную сторону, при этом уже перемещая в начало не максимум, а минимум. Отсортировав в массиве первый и последний элементы, снова делаем меняем направление обхода. Обойдя туда-обратно несколько раз, в итоге заканчиваем процесс, оказавшись в середине списка. 
Шейкерная сортировка работает немного быстрее чем пузырьковая, поскольку по массиву в нужных направлениях попеременно мигрируют и максимумы и минимумы.

   Оценка производительсти алгоритма, представленного в псевдокоде:
   def shaker_sort(self, clist: list, reverse: bool):
    [   ...
        last = len(clist) - 1
        first = -1;
        ...

            first += 1

            for el in range(first, last):     // проходит N-1 раз
               ...

             last -= 1

            for el in range(last, first, -1):   //проходит N-2 раз
               ...]
Тогда O(shaker)=O(N-1+N-2)=O(2N)=O(N)

          
    №3 Сортировка Шелла
 def shell_sort(self, clist: list, reverse: bool   
   Описание логики алгоритма №3
Идея метода заключается в сравнение разделенных на группы элементов последовательности, находящихся друг от друга на некотором расстоянии. Изначально это расстояние равно step или N/2, где N — общее число элементов. На первом шаге каждая группа включает в себя два элемента расположенных друг от друга на расстоянии N/2; они сравниваются между собой, и, в случае необходимости, меняются местами. На последующих шагах также происходят проверка и обмен, но расстояние step сокращается на step/2, и количество групп, соответственно, уменьшается. Постепенно расстояние между элементами уменьшается, и на step=1 проход по массиву происходит в последний раз.

Оценка производительсти алгоритма, представленного в псевдокоде:
def shell_sort(self, clist: list, reverse: bool):
       
        step = len(clist) // 2

        while(step > 0):               // log N
            i = step
            while(i < len(clist)):     // log (N/2)
                j = i - step
                while(j >= 0 and self.compare(clist[j], clist[j + step], reverse)):
                    self.swap(clist, j, j + step)
                    j -= step
                i += 1
            step //= 2
Представим, что массив состоит из 16 элеменов, N=16
N=16 /2, где N=2^4
N=8 /2       N=2^3
N=4 /2       N=2^2
N=2 /2       N=2^1
N=1 /2       N=2^0
Таким образом, 4 - количество операций для 16 элементов, т.е. 2^4=16 =>  4=log(16) по 2
Получается вообщем k=log(N) - количество операций, т.е. сложность алгоритма.
В нашем случае O(shell)=O(log(N)*log(N/2))
   



  

    №4 Сортировка вставкой
  def insertion_sort(self, clist: list, reverse: bool)
    
Описание логики алгоритма №4
Внешний цикл начинает работу со второго элемента массива. Запоминаем значение второго элемента массива. Во внутреннем цикле сравниваем каждый предыдущий 
элемент массива с текущим и, при необходимости, меняем их местами до тех пор, пока не дойдем до начала цикла или пока не встретится элемент менее текущего. 
В результате массив отсортируется по возрастанию.

      Оценка производительсти алгоритма, представленного в псевдокоде:
def insertion_sort(self, clist: list, reverse: bool):
 [  
   for el in range(0, len(clist) - 1):                         // проходит N-1 раз
            i = el
            while(self.compare(clist[i], clist[i + 1], reverse) and i >= 0):  // проходит 1, 2, 3 ... N-1 
                ...
                i -= 1
          ]
Если бы цикл while проходил бы также N-1 раз, то очевидно, что O(f)=O(N^2), тогда получим, что в этой функции:
O(insertion)=O(N^2/2)

    
    
      №5 Сортировка расческой
  def comb_sort(self, clist: list, reverse: bool)
    
Описание логики алгоритма №5
    Основная идея «расчёски» в том, чтобы первоначально брать достаточно большое расстояние между сравниваемыми элементами и по мере упорядочивания массива сужать это расстояние вплоть до минимального. Таким образом, мы как бы причёсываем массив, постепенно разглаживая на всё более аккуратные пряди.

Первоначальный разрыв между сравниваемыми элементами следует брать с учётом специальной величины называемой фактором уменьшения, оптимальное значение которой равно примерно 1,247. Сначала расстояние между элементами равно размеру массива разделённого на фактор уменьшения (результат, естественно, округляется до ближайшего целого). Затем, пройдя массив с этим шагом, мы снова делим шаг на фактор уменьшения и проходим по списку вновь. Так продолжается до тех пор, пока разность индексов не достигнет единицы. В этом случае массив досортировывается обычным пузырьком.

   Оценка производительсти алгоритма, представленного в псевдокоде:
    def comb_sort(self, clist: list, reverse: bool):
        k = 1.2473309;

        step = len(clist) - 2;
        while (step > 1):               // log N (аналогично сортировке Шелла)
            i = 0
            while (i + step < len(clist)):   // 2, 3 ... N-2
                ...
                i += 1
            step /= k
            step = self.round(step)#Округляем число в меньшую сторону, чтобы не попасть в бесконечный цикл

               ...
               
O(comb)=O(log(N) * N)  
 
  
  
  №6 Сортировка деревом
 def tree_sort(self, clist: list, reverse: bool)   
Описание логики алгоритма №6
Оценка производительсти алгоритма, представленного в псевдокоде:
  def tree_sort(self, clist: list, reverse: bool):
        tr = Tree.Tree(clist[0])
        i = 0
        for i in clist[1:]:
            ntr = Tree.Tree(i)
            i += tr.insert(ntr, reverse)
        del clist[:]
        tr.traverse(clist)
        self.__private_compares = int(i)
        self.__private_swaps = 'создано ' + str(len(clist)) + ' экземпляров объекта'
        pass 
   
   
   №7 Гномья сортировка 
   def gnome_sort(self, clist: list, reverse: bool)  
Описание логики алгоритма №7
Гномья сортировка основана на технике, используемой обычным голландским садовым гномом (нидерл. tuinkabouter). Это метод, которым садовый гном сортирует линию цветочных горшков. По существу он смотрит на следующий и предыдущий садовые горшки: если они в правильном порядке, он шагает на один горшок вперёд, иначе он меняет их местами и шагает на один горшок назад. Граничные условия: если нет предыдущего горшка, он шагает вперёд; если нет следующего горшка, он закончил.
 
 Оценка производительсти алгоритма, представленного в псевдокоде:
 def gnome_sort(self, clist: list, reverse: bool):
        i = 0
        it = 0
        while(i < len(clist) and it < 100):       //  N-1 раз
              ...
 O(gnome)=O(N)
 
      №8 Сортировка выбором
 def selection_sort(self, clist: list, reverse: bool)   
      Описание логики алгоритма №8
Сортировка выбором – возможно, самый простой в реализации алгоритм сортировки. Как и в большинстве других подобных алгоритмов, в его основе лежит операция сравнения. Сравнивая каждый элемент с каждым, и в случае необходимости производя обмен, метод приводит последовательность к необходимому упорядоченному виду
Пусть имеется массив A размером N, тогда сортировка выбором сводится к следующему:
берем первый элемент последовательности A[i], здесь i – номер элемента, для первого i равен 1;
находим минимальный (максимальный) элемент последовательности и запоминаем его номер в переменную key;
если номер первого элемента и номер найденного элемента не совпадают, т. е. если key≠1, тогда два этих элемента обмениваются значениями, иначе никаких манипуляций не происходит;
увеличиваем i на 1 и продолжаем сортировку оставшейся части массива, а именно с элемента с номером 2 по N, так как элемент A[1] уже занимает свою позицию;
С каждым последующим шагом размер подмассива, с которым работает алгоритм, уменьшается на 1, но на способ сортировки это не влияет, он одинаков для каждого шага.                      
  Оценка производительсти алгоритма, представленного в псевдокоде:  
  def selection_sort(self, clist: list, reverse: bool):
        for i in range(0, len(clist)):                       // N раз
            minz = clist[i]
            ind = i
            for j in range(i + 1, len(clist)):               // N-1 раз
                ...
O(selection)=O(n^2)
